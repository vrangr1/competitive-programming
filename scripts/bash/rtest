## Script to test the solution against brute force solution with generator cpp providing the inputs

<<COMMENT
TODO:
    -> tletest
    -> Delete test cases
COMMENT

## Imports:
source helper.sh

## File names:
opt_sol="__NA__"
checker="checker"
brute_force="brute_force"
generator="generator"

## Modes:
vs_brute_force=true # Assumed in general

explore_mode=false
debug_mode=false
test_mode=false
case_mode=false
manual_mode=false
save_mode=false
help=false

# Unimplemented
checker_mode=false
tle_mode=false


POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -e|--explore)
        explore_mode=true
        test_mode=false
        vs_brute_force=false
        case_mode=false
        shift # past argument
        ;;
    -t|--test)
        test_mode=true
        explore_mode=false
        vs_brute_force=false
        case_mode=false
        shift # past argument
        ;;
    -c|--case)
        case_mode=true
        test_mode=false
        explore_mode=false
        vs_brute_force=false
        shift # past argument
        ;;
    -m|--manual)
        manual_mode=true
        shift # past argument
        ;;
    -s|--save)
        save_mode=true
        shift # past argument
        ;;
    -d|--debug)
        debug_mode=true
        shift # past argument
        ;;
    -k|--checker)
        checker_mode=true
        shift # past argument
        ;;
    -ss|--set_solution)
        opt_sol=$2
        shift # past argument
        shift # past value
        ;;
    -sg|--set_generator)
        generator=$2
        shift # past argument
        shift # past value
        ;;
    -sb|--set_brute_force)
        brute_force=$2
        shift # past argument
        shift # past value
        ;;
    -sc|--set_checker)
        checker=$2
        shift # past argument
        shift # past value
        ;;
    -h|--help)
        help=true
        explore_mode=false
        vs_brute_force=false
        test_mode=false
        case_mode=false
        shift # past argument
        ;;
    -*|--*)
        echo "Unknown option $1"
        rtest -h
        exit
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
  esac
done

if [[ "$help" == true ]]; then
    echo "${BOLD}Usage:${RED_BOLD} rtest [options] <file_name> [checker] [brute_forcer] [generator]${CLEAR}"
    echo "${BOLD}file_name${CLEAR} assumes the extension .cpp if not given."
    echo "Normal execution without options runs ${BOLD}[file]${CLEAR} vs ${BOLD}brute_forcer${CLEAR} with the given generator"
    echo "${BOLD}Options:"
    echo " ${RED_BOLD} -e, --explore${CLEAR}  Runs ${BOLD}[file]${CLEAR} on a randomly generated input"
    echo " ${RED_BOLD} -t, --test${CLEAR}     Runs ${BOLD}[brute_forcer]${CLEAR} on a randomly generated input"
    echo " ${RED_BOLD} -c, --case${CLEAR}     Generates one test case, runs both ${BOLD}[file]${CLEAR} and ${BOLD}[brute_forcer]${CLEAR} on it"
    echo " ${RED_BOLD} -m, --manual${CLEAR}   Runs both ${BOLD}[file]${CLEAR} and ${BOLD}[brute_forcer]${CLEAR} on given manual input"
    echo " ${RED_BOLD} -s, --save${CLEAR}     Save the input/output while running a particular case. Only works with ${BOLD}-m${CLEAR} or ${BOLD}-c${CLEAR} options"
    echo " ${RED_BOLD} -d, --debug${CLEAR}    Enables debug mode while compilation. Can only be enabled with ${BOLD}-e${CLEAR} or ${BOLD}-t${CLEAR} options"
    echo " ${RED_BOLD} -h, --help${CLEAR}     Display this help message${CLEAR}"
    exit
fi

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [[ $opt_sol == "__NA__" ]]; then
    opt_sol=`basename $PWD`
    opt_sol=${opt_sol#"test_"}.cpp
fi

function fixname {
    local file=$1
    if [[ $file == *.cpp ]]; then file=${file%".cpp"}; fi
    echo $file
}
opt_sol=$(fixname $opt_sol)
checker=$(fixname $checker)
brute_force=$(fixname $brute_force)
generator=$(fixname $generator)

function exists {
    if ! test -f $2/$1.cpp; then
        echo "${RED_BOLD}$1.cpp${CLEAR} does not exist."
        exit 1
    fi
}
exists $opt_sol ..
exists $checker .
exists $brute_force .
exists $generator .

function handle_ctrlc(){
    rm -f $generator
    rm -f $brute_force
    rm -f $opt_sol
    rm -f $checker
    rm -f input out1 out2 checker_input out3 out4
    exit
}
trap handle_ctrlc SIGINT

compile_mode="--compile"
if [[ "$debug_mode" == true ]]; then compile_mode="--debug"; fi
if [[ "$save_mode" == true && "$manual_mode" == false && "$case_mode" == false ]]; then
    echo "${RED_BOLD}Save${CLEAR} option is only availabe with either ${RED_BOLD}manual${CLEAR} or ${RED_BOLD}case${CLEAR} options"
    exit
fi

# Explore Mode:
if [[ "$explore_mode" == true ]]; then
    echo "${BOLD}Exploring behavior of ${RED}${opt_sol}.cpp${CLEAR}${BOLD} against a randomly generated input by ${RED_BOLD}${generator}.cpp${CLEAR}"
    cpr ../$opt_sol.cpp $compile_mode
    cpr $generator.cpp --compile
    ./generator > input
    ./$opt_sol < input > out1
    echo "${BOLD}Input:${CLEAR}"
    cat input
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat out1
    handle_ctrlc
    exit
fi

# Test Mode:
if [[ "$test_mode" == true ]]; then
    if [[ "$manual_mode" == true ]]; then
        echo "Cannot have${RED_BOLD} debug/manual${CLEAR} option enabled with${RED_BOLD} test${CLEAR} mode"
        exit
    fi
    echo "${BOLD}Testing ${RED_BOLD}${brute_force}.cpp${CLEAR}${BOLD} on a randomly generated input by ${RED_BOLD}${generator}.cpp${CLEAR}"
    cpr $brute_force.cpp $compile_mode
    cpr $generator.cpp --compile
    ./generator > input
    ./$brute_force < input > out2
    echo "${BOLD}Input:${CLEAR}"
    cat input
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat out2
    handle_ctrlc
    exit
fi

function copy_input {
    file=$1
    if [[ $2 == ".." ]]; then
        cp -n input $2/
        cp -n out2 $2/
    fi
    cd $2
    sdir $file
    if ! test -f input_${file}/${file}0.in; then
        ct="0";
    else
        ct=`ls input_${file}/${file}*.in | wc -l`
    fi
    ct="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$ct")"
    mv input input_$file/$file$ct.in
    mv out2 output_$file/$file$ct.ans
}

# Case Mode:
if [[ "$case_mode" == true ]]; then
    if [[ "$manual_mode" == true ]]; then
        echo "Cannot have${RED_BOLD} manual${CLEAR} option enabled with${RED_BOLD} case${CLEAR} mode"
        exit
    fi
    echo "${BOLD}Testing ${RED_BOLD}$opt_sol.cpp${CLEAR}${BOLD} against ${RED_BOLD}${brute_force}.cpp${CLEAR}${BOLD} on a randomly generated input by ${RED_BOLD}${generator}.cpp${CLEAR} using ${RED_BOLD}${checker}.cpp${CLEAR}."
    cpr ../$opt_sol.cpp $compile_mode
    cpr $checker.cpp --compile
    cpr $brute_force.cpp --compile
    cpr $generator.cpp --compile
    ./generator > input
    ./$opt_sol < input > out1
    ./$brute_force < input > out2
    (echo "${OUTPUT_START}" && cat input && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out1 && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out2 && echo "${OUTPUT_END}") > checker_input
    echo "${BOLD}Input:${CLEAR}"
    cat input
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat out1
    echo "${GREEN_BOLD}\ncorrect output:${CLEAR}"
    cat out2
    ./$checker < checker_input > out3
    echo "Yes" > out4
    diff -w out3 out4 &>/dev/null
    if [ $? -eq 0 ]; then
        echo "\n${GREEN_BOLD}AC${CLEAR}"
    else
        echo "\n${RED_BOLD}WA${CLEAR}"
    fi
    if [[ "$save_mode" == false ]]; then handle_ctrlc; exit; fi
    copy_input $opt_sol ..
    cd test_$opt_sol
    copy_input $brute_force .
    handle_ctrlc
    exit
fi

# Manual Mode:
if [[ "$manual_mode" == true ]]; then
    echo "${BOLD}Testing ${RED}${opt_sol}.cpp${CLEAR}${BOLD} against ${RED}${brute_force}.cpp${CLEAR}${BOLD} using ${RED}${checker}${CLEAR}${BOLD} on given manual input.${CLEAR}"
    echo "${BOLD}Enter input:${CLEAR}"
    input=$(sed '/^$/q')
    echo "$input" > input
    cpr ../$opt_sol.cpp $compile_mode
    if [[ $checker != "none" ]]; then cpr $checker.cpp --compile; fi
    cpr $brute_force --compile
    cpr $checker --compile
    ./$opt_sol < input > out1
    ./$brute_force < input > out2
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat out1
    echo "${GREEN_BOLD}\ncorrect output:${CLEAR}"
    cat out2
    (echo "${OUTPUT_START}" && cat input && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out1 && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out2 && echo "${OUTPUT_END}") > checker_input
    ./$checker < checker_input > out3
    echo "Yes" > out4
    diff -w out3 out4 &>/dev/null
    if [ $? -eq 0 ]; then
        echo "\n${GREEN_BOLD}AC${CLEAR}"
    else
        echo "\n${RED_BOLD}WA${CLEAR}"
    fi
    if [[ "$save_mode" == false ]]; then handle_ctrlc; exit; fi
    copy_input $opt_sol ..
    cd test_$opt_sol
    copy_input $brute_force .
    handle_ctrlc
    exit
fi

echo "Testing ${RED_BOLD}${opt_sol}.cpp${CLEAR} against ${RED_BOLD}${brute_force}.cpp${CLEAR} with ${RED_BOLD}${generator}.cpp${CLEAR} using ${RED_BOLD}${checker}.cpp${CLEAR}."

cpr ../$opt_sol.cpp --compile
cpr $checker.cpp --compile
cpr $brute_force.cpp --compile
cpr $generator.cpp --compile

for((i=1;;++i));do
    printf '%s' "${i}: "
    # Call generator and pipe to input
    ./$generator > input
    ./$opt_sol < input > out1
    ./$brute_force < input > out2
    (echo "${OUTPUT_START}" && cat input && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out1 && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat out2 && echo "${OUTPUT_END}") > checker_input
    ./$checker < checker_input > out3
    echo "Yes" > out4
    diff -w out3 out4 &>/dev/null
    if [ $? -eq 0 ]; then
        echo "${GREEN_BOLD}AC${CLEAR}"
    else
        echo "${RED_BOLD}WA${CLEAR}"
        break
    fi
done
echo "${BOLD}\nFailing input:${CLEAR}"
cat input
echo "${BOLD}\noutput begins now:${CLEAR}"
cat out1
echo "${GREEN_BOLD}\ncorrect output:${CLEAR}"
cat out2
copy_input $opt_sol ..
cd test_$opt_sol
copy_input $brute_force .
handle_ctrlc