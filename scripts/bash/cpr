<<COMMENT
Details for script lister program:
command     : cpr
description : Compiles and runs a cpp file
list        : true
COMMENT
# Shell script for compiling and/or running cpp files

## Imports
source helper.sh

## Cleanup when forcefully exiting execution
function handle_ctrlc () {
    rm -f $file $file.out
    rm -f in.ans checker_input checker_output expected_output
    if [[ $checker != *.cpp ]]; then
        rm -f $checker
    fi
    exit
}
trap handle_ctrlc SIGINT

## All flags:
warnings="-Wall -Wextra -Wshadow -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wfloat-equal -Wconversion -pedantic"
### stack size 0x20000000 is 512 MB (the max allowed by M1 Mac Air)
flags="-O2 -D_GLIBCXX_ASSERTIONS -Wno-sign-conversion -Wl,-stack_size -Wl,0x20000000"
cpp_version="-std=c++20"
debug="-DLOCAL"

## Modes:
compile_mode=false
debug_mode=false
final_mode=false
test_mode=false
gather_mode=false
input_test_mode=false
clear_test_case=false
view_test_case=false
help=false

## Variables:
folder=""
checker=""

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--compile)
        compile_mode=true
        debug=""
        shift # past argument
        ;;
    -d|--debug)
        debug_mode=true
        debug="-DLOCAL"
        shift # past argument
        ;;
    -w|--silent)
        ## Silencing warnings
        warnings="-w"
        shift # past argument
        ;;
    -f|--final)
        final_mode=true
        debug=""
        shift # past argument
        ;;
    -t|--test)
        test_mode=true
        debug=""
        shift # past argument
        ;;
    -r|--run)
        input_test_mode=true
        shift # past argument
        ;;
    -g|--gather)
        gather_mode=true
        debug=""
        shift # past argument
        ;;
    -k|--clear)
        clear_test_case=true
        debug=""
        shift # past argument
        ;;
    -v|--view)
        view_test_case=true
        shift # past argument
        ;;
    -sf|--set-folder)
        folder=$2
        shift # past argument
        shift # past value
        ;;
    -sc|--set-checker)
        checker=$2
        shift # past argument
        shift # past value
        ;;
    -h|--help)
        help=true
        shift # past argument
        ;;
    -*|--*)
        echo "Unknown option $1"
        cpr -h
        exit
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
  esac
done

if [[ "$help" == true ]]; then
    echo "${BOLD}Usage:${RED_BOLD} cpr [options] file_name${CLEAR}"
    echo "${BOLD}file_name${CLEAR} assumes the extension .cpp if not given."
    echo "${BOLD}Options:"
    echo " ${RED_BOLD} -c, --compile${CLEAR}       Compile the file"
    echo " ${RED_BOLD} -d, --debug${CLEAR}         Compile the file with debug flag"
    echo " ${RED_BOLD} -w, --silent${CLEAR}        Silences compilation warnings"
    echo " ${RED_BOLD} -f, --final${CLEAR}         Compile and run the file without the debug flag"
    echo " ${RED_BOLD} -t, --test${CLEAR}          Compile the file and run it against the saved test cases"
    echo " ${RED_BOLD} -r, --run${CLEAR}           Compile the file and run it against a particular saved test case"
    echo " ${RED_BOLD} -g, --gather${CLEAR}        Compile the file and run it. Save the input file for future testing. Ask for the output and save it too"
    echo " ${RED_BOLD} -k, --clear${CLEAR}         Deletes the given test case"
    echo " ${RED_BOLD} -v, --view${CLEAR}          View list of test cases / a particular test case"
    echo " ${RED_BOLD} -sf, --set-folder${CLEAR}   Set test folder name"
    echo " ${RED_BOLD} -sc, --set-checker${CLEAR}  Set checker path"
    echo " ${RED_BOLD} -h, --help${CLEAR}          Display this help message${CLEAR}"
    exit
fi

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

## File name and location
if [[ $# -eq 0 ]]; then file="file"; file_loc="file.cpp";
else file=`basename $1 .cpp`; file_loc=$1; fi

# If file does not exist then exit
if [[ $file_loc != *.cpp ]]; then file_loc=${file_loc}.cpp; fi
if ! test -f $file_loc; then echo "${RED_BOLD}ERROR: ${file_loc}${CLEAR} does not exist"; exit; fi

## Test Case Viewing Mode:
if [[ "$view_test_case" == true ]]; then
    if ( (! test -d input_$file) ); then
        echo "${RED_BOLD}ERROR:${CLEAR} Input directory doesn't exist."
        exit
    fi
    ct=$(ls input_$file/ | wc -l)
    ct="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$ct")"
    if [[ $ct == "0" ]]; then
        echo "${RED_BOLD}ERROR:${CLEAR} Input directory is empty."
        exit
    fi
    read -r -p "Enter the test case index: " test_case
    if [[ "$test_case" == "l" || "$test_case" == "last" ]]; then
        input=$(ls input_$file/ | sort -V | tail -n 1)
        input="input_$file/$input"
        outfile="output_$file/`basename $input .in`.ans"
    elif [[ "$test_case" == "all" || "$test_case" == "a" ]]; then
        ls input_$file
        exit
    else
        input=input_$file/${file}${test_case}.in
        outfile=output_$file/${file}${test_case}.ans
    fi
    if ! test -f "$input"; then
        echo "$input not found"
        handle_ctrlc
        exit
    fi
    echo "\n${BOLD}Input:${CLEAR}"
    cat $input
    echo "\n${BOLD}Output:${CLEAR}"
    cat $outfile
    exit
fi

if [[ $folder == "" ]]; then
    folder="test_${file}"
else
    if [[ $folder != test_* ]]; then
        echo "${RED_BOLD}ERROR:${CLEAR} Incorrect test folder name ${folder}."
        exit
    fi
fi

if [[ $checker == "" ]]; then
    checker="./test_${file}/checker.cpp"
    if ! test -f $checker; then
        checker=""
    fi
else
    if ! test -f $checker; then
        echo "${RED_BOLD}ERROR:${CLEAR} Given checker file ${checker} does not exist."
        exit
    elif [[ $checker != *.cpp ]]; then
        echo "${RED_BOLD}ERROR: ${checker}${CLEAR} is not a cpp file."
        exit
    fi
fi


if [[ "$compile_mode" == true && ( "$debug_mode" == true || "$final_mode" == true || "$test_mode" == true || "$gather_mode" == true || "$input_test_mode" == true ) ]]; then
    echo "Can't pass the${RED_BOLD} compile${CLEAR} option with any of${RED_BOLD} debug/final/test/run/gather${CLEAR} options at the same time."
    exit
fi

if [[ "$final_mode" == true && ( "$test_mode" == true || "$gather_mode" == true || "$debug" != "" ) ]]; then
    echo "Can't pass the${RED_BOLD} final${CLEAR} option with any of${RED_BOLD} compile/test/gather/debug${CLEAR} options at the same time."
    exit
fi

if [[ "$test_mode" == true && ( "$input_test_mode" == true || "$gather_mode" == true || "$debug" != "" )]]; then
    echo "Can't pass the${RED_BOLD} test${CLEAR} option with any of${RED_BOLD} compile/debug/run/final/gather${CLEAR} options at the same time."
    exit
fi

if [[ "$input_test_mode" == true && ( "$gather_mode" == true )]]; then
    echo "Can't pass the${RED_BOLD} run${CLEAR} option with${RED_BOLD} gather${CLEAR} option at the same time."
    exit
fi

if [[ "$clear_test_case" == true && ( "$compile_mode" == true || "$debug_mode" == true || "$final_mode" == true || "$test_mode" == true || "$input_test_mode" == true || "$gather_mode" == true )]]; then
    echo "Can't pass the${RED_BOLD} clear test case${CLEAR} option with any of the${RED_BOLD} compile/debug/run/gather/test${CLEAR} options at the same time."
    exit
fi

## Delete a given test case:
if [[ "$clear_test_case" == true ]]; then
    if ( (! test -d input_$file) ); then
        echo "Input directory doesn't exist"
        exit
    fi
    ct=$(ls input_$file/ | wc -l)
    ct="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$ct")"
    if [[ $ct == "0" ]]; then
        echo "Input directory is empty."
        exit
    fi
    read -r -p "Enter the test case index: " test_case
    if [[ "$test_case" == "l" || "$test_case" == "last" ]]; then
        input=$(ls input_$file/ | sort -V | tail -n 1)
        input="input_$file/$input"
        outfile="output_$file/`basename $input .in`.ans"
    else
        input=input_$file/${file}${test_case}.in
        outfile=output_$file/${file}${test_case}.ans
    fi
    if ! test -f "$input"; then
        echo "$input not found"
        rm -f $file $file.out
        exit
    fi
    
    rm -vf $input $outfile
    exit
fi

## Run on a particular test case (1/2):
if [[ "$input_test_mode" == true ]]; then
    if ( (! test -d input_$file) ); then
        echo "Input directory doesn't exist"
        exit
    fi
    ct=$(ls input_$file/ | wc -l)
    ct="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$ct")"
    if [[ $ct == "0" ]]; then
        echo "Input directory is empty."
        exit
    fi
    read -r -p "Enter the test case index: " test_case
    if [[ "$test_case" == "l" || "$test_case" == "last" ]]; then
        input=$(ls input_$file/ | sort -V | tail -n 1)
        input="input_$file/$input"
        outfile="output_$file/`basename $input .in`.ans"
    else
        input=input_$file/${file}${test_case}.in
        outfile=output_$file/${file}${test_case}.ans
    fi
    if ! test -f "$input"; then
        echo "$input not found"
        rm -f $file $file.out
        exit
    fi
fi

## Gathering Mode (0/1):
if [[ "$gather_mode" == true ]]; then
    echo "${BOLD}Enter input:${CLEAR}"
fi

# Compiling
$COMPILER $cpp_version $file_loc -o $file $debug $warnings $flags

## If only need to compile, then exit
if [[ "$compile_mode" == true || "$debug_mode" == true ]]; then exit; fi

if [[ $checker != "" ]]; then
    cpr $checker --compile
    checker=`basename $checker .cpp`
fi

## Testing Mode:
if [[ "$test_mode" == true ]]; then
    if ( (! test -d input_$file) || (! test -d output_$file) ); then sdir $file; fi
    
    for input in input_$file/*.in; do
        if [[ $input == "input_$file/*.in" ]] ; then 
            echo "No inputs found."
            rm -rvf input_$file
            rm -rvf output_$file
            break
        fi
        printf '%s' "${input}: "
        outfile=`basename $input`
        outfile=${outfile%".in"}.ans
        if ! test -f output_$file/$outfile; then
            echo "Output file $outfile does not exist for $input. Skipping..."
            continue
        fi
        ./$file < $input > in.ans
        if [[ $checker != "" ]]; then
            (echo "${OUTPUT_START}" && cat $input && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat in.ans && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat output_$file/$outfile && echo "${OUTPUT_END}") > checker_input
            ./$checker < checker_input > checker_output
            echo "YES" > expected_output
            diff -w checker_output expected_output &>/dev/null
        else
            diff -w in.ans output_$file/$outfile &>/dev/null
        fi
        if [ $? -eq 0 ]; then
            echo "${GREEN_BOLD}AC${CLEAR}"
        else
            echo "${RED_BOLD}WA${CLEAR}"
            echo "${BOLD}\nFailing Input:${CLEAR}"
            cat $input
            echo "${BOLD}\noutput begins now:${CLEAR}"
            cat in.ans
            echo "${GREEN_BOLD}\ncorrect output:${CLEAR}"
            cat output_$file/$outfile
            break
        fi
        rm -f in.ans
    done
    handle_ctrlc
    exit
fi

## Run on a particular test case (2/2):
if [[ "$input_test_mode" == true ]]; then
    echo $input
    cat $input
    ./$file < $input > $file.out
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat $file.out
    echo "${GREEN_BOLD}\ncorrect output:${CLEAR}"
    cat $outfile
    if [[ "$final_mode" == false ]]; then
        handle_ctrlc
        exit
    fi
    if [[ $checker != "" ]]; then
        (echo "${OUTPUT_START}" && cat $input && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat $file.out && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat $outfile && echo "${OUTPUT_END}") > checker_input
        ./$checker < checker_input > checker_output
        echo "YES" > expected_output
        diff -w checker_output expected_output &>/dev/null
    else
        diff -w $file.out $outfile &>/dev/null
    fi
    if [ $? -eq 0 ]; then
        echo "\n${GREEN_BOLD}AC${CLEAR}"
    else
        echo "\n${RED_BOLD}WA${CLEAR}"
    fi
    handle_ctrlc
    exit
fi

## Gathering Mode:
if [[ "$gather_mode" == true ]]
then
    ### Take input:
    input=$(sed '/^$/q')

    ### Determine correct input suffix
    if ! test -f ${file}0.in
    then 
        if ! test -d input_${file}; then ct="0";
        elif ! test -f input_${file}/${file}0.in; then
            ct="0";
        else
            ct=`ls input_${file}/${file}*.in | wc -l`
        fi
    else
        ct=`ls ${file}*.in | wc -l`
    fi
    ct="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$ct")"

    echo "$input" > $file$ct.in
    ./$file < $file$ct.in > $file.out
    echo "${BOLD}output begins now:${CLEAR}"
    cat $file.out
    echo "${BOLD}\nInput the correct output:${CLEAR}"
    output=$(sed '/^$/q')
    echo "$output" > $file$ct.ans
    if [[ $checker != "" ]]; then
        (echo "${OUTPUT_START}" && cat $file$ct.in && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat $file.out && echo "${OUTPUT_END}" && echo "${OUTPUT_START}" && cat $file$ct.ans && echo "${OUTPUT_END}") > checker_input
        ./$checker < checker_input > checker_output
        echo "YES" > expected_output
        diff -w checker_output expected_output &>/dev/null
    else
        diff -w $file.out $file$ct.ans &>/dev/null
    fi
    if [ $? -eq 0 ]; then
        echo "${GREEN_BOLD}AC${CLEAR}"
    else
        echo "${RED_BOLD}WA${CLEAR}"
    fi
    sdir $file
    handle_ctrlc
    exit
fi

## Finally run the program
if test -f $file; then
    ./$file > $file.out
    echo "${BOLD}\noutput begins now:${CLEAR}"
    cat $file.out
    rm $file $file.out
fi
handle_ctrlc