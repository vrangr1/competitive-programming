#include <stdc++.h>

// #define print_var(x) cout << #x << ": " << x << endl;
using namespace std;



#define print_var(x) cout << #x << ": "<< x << endl;
class Solution {
public:
    bool isPalindrome(string s){
        for (int i = 0; i < s.size() / 2; ++i)
            if (s[i] != s[s.size() - 1 - i]) return false;
        return true;
    }

    void updateMaxLen(int &maxlen, int &maxs, int start, int len){
        if (len <= maxlen) return;
        maxs = start;
        maxlen = len;
    }

    string longPalin(int stPoint, string &s){
        int start = stPoint, len = 2, maxlen = 2, maxs = stPoint;
        int start2 = stPoint, len2 = 1;
        if (s[stPoint] != s[stPoint+1]){
            maxlen = 1;
            len = 1;
            start = stPoint + 1;
        }
        for (int i = stPoint + 2; i < s.size(); i++){
            int tempStart = start, tempLen = len;
            if (start - 1 >= 0){
                if (s[start - 1] == s[i]){
                    start -=1;
                    len += 2;
                    updateMaxLen(maxlen, maxs, start, len);
                }
                else if (s[i] == s[i-1]){
                    bool allsame = true;
                    for (int j = start; j < i - 1; ++j){
                        if (s[j] != s[i]) allsame = false;
                        if (!allsame) break;
                    }
                    if (allsame){
                        len += 1;
                        updateMaxLen(maxlen, maxs, start, len);
                    }
                    else{
                        start = i -1;
                        len = 2;
                        updateMaxLen(maxlen, maxs, start, len);
                    }
                }
                else{
                    start = i;
                    len = 1;
                }
            }
            else{
                if (s[i] == s[i-1]){
                    start = i-1;
                    len = 2;
                    updateMaxLen(maxlen, maxs, start, len);
                }
                else{
                    start = i;
                    len = 1;
                }
            }
            if (start2 - 2 >= 0){
                if (s[start2 - 2] == s[i] && s[start2 - 1] == s[i-1]){
                    int temp = i - start2 + 3;
                    if (temp > len){
                        start = start2 - 2;
                        len = temp;
                        updateMaxLen(maxlen, maxs, start, len);
                    }
                }
                else{
                    if (isPalindrome(s.substr(start2, i - start2 + 1))){
                        start = start2;
                        len = i - start2 + 1;
                        updateMaxLen(maxlen, maxs, start, len);
                    }
                }
            }
            else{
                if (isPalindrome(s.substr(start2, i - start2 + 1))){
                    start = start2;
                    len = i - start2 + 1;
                    updateMaxLen(maxlen, maxs, start, len);
                }
            }
            start2 = tempStart;
            len2 = tempLen;
        }
        return s.substr(maxs, maxlen);
    }
    
    string n2solution(string &s){
        int len = s.size();
        for (len = s.size(); len > 1; --len){
            for (int start = 0; start <= s.size() - len; ++start){
                string substring = s.substr(start, len);
                if (isPalindrome(substring)) return substring;
            }
        }
        return s.substr(0,1);
    }
    
    bool isAlpha(string &s){
        for (int i = 0; i < s.size(); ++i)
            if (!isalpha(s[i])) return false;
        return true;
    }

    string longestPalindrome(string s) {
        if (isAlpha(s)) return longPalin(0, s);
        else return n2solution(s);
    }
};


int main(){
    // Do nothing; class based solution: leetcode
    string inputStr = "babadada";
    Solution obj;
    cout << obj.longestPalindrome(inputStr) << endl;
    return 0;
}





